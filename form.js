// Generated by CoffeeScript 1.6.3
/*
github.com/rafbgarcia/form

Dependencies: jQuery 1.8.2
*/


(function() {
  (function(window) {
    var Form;
    window.Form = function(params) {
      return new Form(params);
    };
    window.Validators = function() {
      return {
        required: function(errMessage) {
          return {
            isValid: function(val) {
              return !!val.toString().trim();
            },
            errMessage: errMessage || 'Field is required'
          };
        },
        email: function(errMessage) {
          var regex;
          regex = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
          return {
            isValid: function(val) {
              if (val && regex.test(val)) {
                return true;
              }
              return false;
            },
            errMessage: errMessage || 'Email is invalid'
          };
        },
        minLength: function(length, errMessage) {
          return {
            isValid: function(val) {
              return val.toString().trim().length >= length;
            },
            errMessage: errMessage || ("The text is too short, minimum length is " + length)
          };
        },
        maxLength: function(length, errMessage) {
          return {
            isValid: function(val) {
              return val.toString().trim().length <= length;
            },
            errMessage: errMessage || ("The text is too long, maximum length is " + length)
          };
        },
        betweenLength: function(minLength, maxLength, errMessage) {
          return {
            isValid: function(val) {
              var valLength;
              valLength = val.toString().trim().length;
              return valLength >= minLength && valLength <= maxLength;
            },
            errMessage: errMessage || ("The text must have length between " + minLength + " and " + maxLength)
          };
        },
        numeric: function(errMessage) {
          return {
            isValid: function(val) {
              return $.isNumeric(val);
            },
            errMessage: errMessage || 'Field accepts only numeric values'
          };
        },
        min: function(value, errMessage) {
          return {
            isValid: function(val) {
              val = parseInt(val, 10);
              return val >= value;
            },
            errMessage: errMessage || ("Minimum value is " + value)
          };
        },
        max: function(value, errMessage) {
          return {
            isValid: function(val) {
              val = parseInt(val, 10);
              return val <= value;
            },
            errMessage: errMessage || ("Maximum value is " + value)
          };
        },
        between: function(min, max, errMessage) {
          return {
            isValid: function(val) {
              val = parseInt(val, 10);
              return val >= min && val <= max;
            },
            errMessage: errMessage || ("The value must be between " + min + " and " + max)
          };
        },
        match: function(field, errMessage) {
          if (typeof field === 'string') {
            field = $(":input[name='" + field + "']");
          }
          return {
            isValid: function(val) {
              return field.val() === val;
            },
            errMessage: errMessage || ['Field does not match with field', field.attr('name')].join(' ')
          };
        }
      };
    };
    return Form = function(params) {
      var blurAio, blurEach, blurTarget, blurType, formErrors, formFields, i, onBlurTarget, self, validateField, validateForm, _fn,
        _this = this;
      formFields = params.fields;
      formErrors = {};
      self = this;
      validateField = function(fieldName, callback) {
        var err, field, fieldValue, i, validators;
        _this.clearErrors(fieldName);
        field = formFields[fieldName];
        fieldValue = field.value;
        validators = field.validators;
        err = false;
        if (validators.hasOwnProperty('isValid')) {
          if (!validators.isValid(fieldValue)) {
            err = validators.errMessage;
            _this.addError(fieldName, err);
            callback(err);
          }
        } else if (validators.length) {
          for (i in validators) {
            if (!field.hasError && !validators[i].isValid(fieldValue)) {
              err = validators[i].errMessage;
              _this.addError(fieldName, err);
              callback(err);
            }
          }
        }
        if (!err) {
          return callback();
        }
      };
      validateForm = function(callback) {
        var error, i;
        error = false;
        for (i in formFields) {
          validateField(i, function(err) {
            if (err) {
              return error = true;
            }
          });
        }
        return callback(error);
      };
      this.element = params.form;
      this.fields = function(name) {
        return (name && formFields[name]) || formFields;
      };
      this.bind = function(data) {
        var i;
        for (i in data) {
          if (formFields.hasOwnProperty(i)) {
            formFields[i].value = data[i];
          }
        }
        return this;
      };
      this.errors = formErrors;
      this.addError = function(fieldName, error) {
        formErrors[fieldName] = error;
        formFields[fieldName].hasError = true;
        return formFields[fieldName].error = error;
      };
      this.hasErrors = function() {
        var i;
        for (i in formFields) {
          if (formFields[i].hasError) {
            return true;
          }
        }
        return false;
      };
      this.clearErrors = function(fieldName) {
        formErrors[fieldName] = void 0;
        formFields[fieldName].hasError = void 0;
        return formFields[fieldName].error = void 0;
      };
      this.validate = function(fieldName, callback) {
        if (typeof fieldName === 'function') {
          callback = fieldName;
          validateForm(callback);
        } else if (typeof fieldName === 'string') {
          validateField(fieldName, callback);
        }
        return this;
      };
      blurType = params.blurType;
      onBlurTarget = function(field, form) {
        if (blurType === 'each') {
          return field.next('.field-error');
        } else {
          return $('#form-errors');
        }
      };
      blurEach = function(error, target, field, form) {
        return target.html(error || '');
      };
      blurAio = function(err, target, field, form) {
        var error, message, name;
        name = field.attr('name');
        error = $("#field-error-" + name);
        if (err) {
          message = "" + name + ": " + err;
          if (error.length) {
            if (message !== error.html()) {
              return error.html(message);
            }
          } else {
            message = "<p id='field-error-" + name + "'>" + message + "</p>";
            return target.append(message);
          }
        } else if (error.length) {
          return error.html('');
        }
      };
      if (params.fieldBlur === true) {
        blurTarget = params.onBlurTarget;
        if (typeof blurTarget !== 'function') {
          blurTarget = onBlurTarget;
        }
        if ((blurType != null) && blurType !== 'each') {
          self.element.before('<div id="form-errors"></div>');
        }
        _fn = function(i) {
          var field;
          field = self.element.find(":input[name='" + i + "']");
          if ((blurType != null) && blurType === 'each') {
            field.after('<span class="field-error"></span>');
          }
          return field.blur(function(e) {
            var data;
            data = {};
            data[i] = field.val();
            self.bind(data);
            return self.validate(i, function(err) {
              var target;
              target = blurTarget(field, self.element);
              if (blurType === 'each') {
                return blurEach(err, target, field, self.element);
              } else if (blurType === 'aio') {
                return blurAio(err, target, field, self.element);
              }
            });
          });
        };
        for (i in formFields) {
          _fn(i);
        }
      }
      /*
      if params.onSubmit?
          @element.submit (e) =>
              e.preventDefault()
              params = @element.serialize()
      */

      return this;
    };
  })(window);

}).call(this);
