// Generated by CoffeeScript 1.3.3
/*
Eim v0.1
github.com/rafbgarcia/eimjs.git

Dependencies: jQuery 1.8.2
*/

(function(window) {
  var Eim, Form, Slider;
  Eim = {};
  Eim.Form = function(params) {
    return new Form(params);
  };
  Eim.validators = {
    required: function(errMessage) {
      return {
        isValid: function(val) {
          return !!val.toString().trim();
        },
        errMessage: errMessage || 'Field is required'
      };
    },
    email: function(errMessage) {
      var regex;
      regex = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
      return {
        isValid: function(val) {
          if (val && regex.test(val)) {
            return true;
          }
          return false;
        },
        errMessage: errMessage || 'Email is invalid'
      };
    },
    minLength: function(length, errMessage) {
      return {
        isValid: function(val) {
          return val.toString().trim().length >= length;
        },
        errMessage: errMessage || ("The text is too short, minimum length is " + length)
      };
    },
    maxLength: function(length, errMessage) {
      return {
        isValid: function(val) {
          return val.toString().trim().length <= length;
        },
        errMessage: errMessage || ("The text is too long, maximum length is " + length)
      };
    },
    betweenLength: function(minLength, maxLength, errMessage) {
      return {
        isValid: function(val) {
          var valLength;
          valLength = val.toString().trim().length;
          return valLength >= minLength && valLength <= maxLength;
        },
        errMessage: errMessage || ("The text must have length between " + minLength + " and " + maxLength)
      };
    },
    numeric: function(errMessage) {
      return {
        isValid: function(val) {
          return $.isNumeric(val);
        },
        errMessage: errMessage || 'Field accepts only numeric values'
      };
    },
    min: function(value, errMessage) {
      return {
        isValid: function(val) {
          val = parseInt(val, 10);
          return val >= value;
        },
        errMessage: errMessage || ("Minimum value is " + value)
      };
    },
    max: function(value, errMessage) {
      return {
        isValid: function(val) {
          val = parseInt(val, 10);
          return val <= value;
        },
        errMessage: errMessage || ("Maximum value is " + value)
      };
    },
    between: function(min, max, errMessage) {
      return {
        isValid: function(val) {
          val = parseInt(val, 10);
          return val >= min && val <= max;
        },
        errMessage: errMessage || ("The value must be between " + min + " and " + max)
      };
    },
    match: function(field, errMessage) {
      if (typeof field === 'string') {
        field = $(":input[name='" + field + "']");
      }
      return {
        isValid: function(val) {
          return field.val() === val;
        },
        errMessage: errMessage || ['Field does not match with field', field.attr('name')].join(' ')
      };
    }
  };
  Eim.Slider = function(params) {
    return new Slider(params);
  };
  Slider = function(p) {
    var activeClass, controls, count, firstTarget, interval, lastTarget, targets, targetsActiveClass, transitionDuration, visibleTime, _addActiveClass, _loadNextTarget, _loadPrevTarget, _loadTarget, _setInterval, _startSlider, _stopSlider;
    if (!p.targets) {
      throw 'Which are the targets?';
    }
    if (!p.indexTriggers) {
      throw 'Which are the triggers?';
    }
    transitionDuration = p.transitionDuration || 600;
    targetsActiveClass = p.targetsActiveClass || 'active';
    visibleTime = p.visibleTime || 6000;
    targets = p.targets;
    controls = (p.indexTriggers && p.indexTriggers.controls) || p.indexTriggers;
    activeClass = (p.indexTriggers && p.indexTriggers.activeClass) || 'active';
    count = targets.length;
    interval = null;
    firstTarget = targets.first();
    lastTarget = targets.last();
    if (count < 2) {
      return false;
    }
    firstTarget.siblings().hide(0);
    _addActiveClass = function(target) {
      var i;
      i = targets.index(target);
      targets.removeClass(targetsActiveClass);
      target.addClass(targetsActiveClass);
      controls.removeClass(activeClass);
      return controls.eq(i).addClass(activeClass);
    };
    _addActiveClass(firstTarget);
    _loadNextTarget = function(current) {
      var next;
      next = current.next(targets);
      return _loadTarget(next.length && next) || firstTarget;
    };
    _loadPrevTarget = function(current) {
      var prev;
      prev = current.prev(targets);
      return _loadTarget((prev.length && prev) || lastTarget);
    };
    _loadTarget = function(nextTarget) {
      if (typeof nextTarget === 'number') {
        nextTarget = targets.eq(nextTarget);
      }
      targets.stop(true, true).fadeOut(transitionDuration);
      nextTarget.stop(true, true).fadeIn(transitionDuration);
      _addActiveClass(nextTarget);
      return nextTarget;
    };
    _stopSlider = function() {
      return window.clearInterval(interval);
    };
    _setInterval = function(callback) {
      return interval = window.setInterval(callback, visibleTime);
    };
    _startSlider = function() {
      var current;
      current = targets.siblings('.' + targetsActiveClass);
      if (!p.inverseDirection) {
        return _setInterval(function() {
          return current = _loadNextTarget(current);
        });
      } else {
        return _setInterval(function() {
          return current = _loadPrevTarget(current);
        });
      }
    };
    this.init = function() {
      if (p.auto) {
        _startSlider();
      }
      if (controls != null) {
        controls.bind('click', function(e) {
          e.preventDefault();
          _stopSlider();
          _loadTarget(controls.index($(this)));
          return _startSlider();
        });
      }
      return this;
    };
    this.destroy = function() {
      _stopSlider();
      controls.unbind('click');
      return this;
    };
    this.remake = function() {
      this.init();
      return this;
    };
    return this.init();
  };
  Eim.sendMessage = function(message, title) {};
  Eim.improveInputFile = function(obj) {
    return obj = obj || $('input:file');
  };
  /*
      Placeholder (for IE only)
      @param callback set a callback if you need to validate your form fields,
             it will be triggered if form has fields with value == placeholder
             callback(fieldsNamesWithErrors, submittedForm)
  */

  Eim.placeholder = function(callback) {
    var errors, forms, inputs, submited, valueEqualsPlaceholder;
    if (navigator.appName === 'Microsoft Internet Explorer') {
      submited = {};
      inputs = $(':input[placeholder]');
      forms = $('form');
      errors = [];
      valueEqualsPlaceholder = function(element) {
        return element.val() === element.attr('placeholder');
      };
      inputs.each(function() {
        var _this;
        _this = $(this);
        return _this.val(_this.attr('placeholder'));
      }).focus(function() {
        var _this;
        _this = $(this);
        if (valueEqualsPlaceholder(_this)) {
          return _this.val('');
        }
      }).blur(function() {
        var _this;
        _this = $(this);
        if (!_this.val()) {
          return _this.val(_this.attr('placeholder'));
        }
      });
      if (typeof callback === 'function') {
        return forms.submit(function(e) {
          var i, that, _inputs;
          errors = [];
          that = $(this);
          i = that.index(forms);
          _inputs = that.find(':input[placeholder]');
          if (!submited[i]) {
            e.preventDefault();
            submited[i] = true;
            _inputs.each(function() {
              var _this;
              _this = $(this);
              if (valueEqualsPlaceholder(_this)) {
                return errors.push(_this);
              }
            });
            if (errors.length) {
              submited[i] = false;
            }
            return callback(errors, that);
          }
        });
      }
    }
  };
  Form = function(params) {
    var blurTarget, blurType, formErrors, formFields, i, _blurAio, _blurEach, _fn, _onBlurTarget, _validateField, _validateForm,
      _this = this;
    formFields = params.fields;
    formErrors = {};
    _this = this;
    _validateField = function(fieldName, callback) {
      var err, field, fieldValue, i, validators;
      _this.clearErrors(fieldName);
      field = formFields[fieldName];
      fieldValue = field.value;
      validators = field.validators;
      err = false;
      if (validators.hasOwnProperty('isValid')) {
        if (!validators.isValid(fieldValue)) {
          err = validators.errMessage;
          _this.addError(fieldName, err);
          callback(err);
        }
      } else if (validators.length) {
        for (i in validators) {
          if (!field.hasError) {
            if (!validators[i].isValid(fieldValue)) {
              err = validators[i].errMessage;
              _this.addError(fieldName, err);
              callback(err);
            }
          }
        }
      }
      if (!err) {
        return callback();
      }
    };
    _validateForm = function(callback) {
      var error, i;
      error = false;
      for (i in formFields) {
        _validateField(i, function(err) {
          if (err) {
            return error = true;
          }
        });
      }
      return callback(error);
    };
    this.element = params.form;
    this.fields = function(name) {
      return (name && formFields[name]) || formFields;
    };
    this.bind = function(data) {
      var i;
      for (i in data) {
        if (formFields.hasOwnProperty(i)) {
          formFields[i].value = data[i];
        }
      }
      return this;
    };
    this.errors = formErrors;
    this.addError = function(fieldName, error) {
      formErrors[fieldName] = error;
      formFields[fieldName].hasError = true;
      return formFields[fieldName].error = error;
    };
    this.hasErrors = function() {
      var i;
      for (i in formFields) {
        if (formFields[i].hasError) {
          return true;
        }
      }
      return false;
    };
    this.clearErrors = function(fieldName) {
      formErrors[fieldName] = void 0;
      formFields[fieldName].hasError = void 0;
      return formFields[fieldName].error = void 0;
    };
    this.validate = function(fieldName, callback) {
      if (typeof fieldName === 'function') {
        callback = fieldName;
        _validateForm(callback);
      } else if (typeof fieldName === 'string') {
        _validateField(fieldName, callback);
      }
      return this;
    };
    blurType = params.blurType;
    _onBlurTarget = function(field, form) {
      if (blurType === 'each') {
        return field.next('.field-error');
      } else {
        return $('#form-errors');
      }
    };
    _blurEach = function(error, target, field, form) {
      return target.html(error || '');
    };
    _blurAio = function(err, target, field, form) {
      var error, message, name;
      name = field.attr('name');
      error = $("#field-error-" + name);
      if (err) {
        message = "" + name + ": " + err;
        if (error.length) {
          if (message !== error.html()) {
            return error.html(message);
          }
        } else {
          message = "<p id='field-error-" + name + "'>" + message + "</p>";
          return target.append(message);
        }
      } else if (error.length) {
        return error.html('');
      }
    };
    if (params.fieldBlur === true) {
      blurTarget = params.onBlurTarget;
      if (typeof blurTarget !== 'function') {
        blurTarget = _onBlurTarget;
      }
      if ((blurType != null) && blurType !== 'each') {
        _this.element.before('<div id="form-errors"></div>');
      }
      _fn = function(i) {
        var field;
        field = _this.element.find(":input[name='" + i + "']");
        if ((blurType != null) && blurType === 'each') {
          field.after('<span class="field-error"></span>');
        }
        return field.blur(function(e) {
          var data;
          data = {};
          data[i] = field.val();
          _this.bind(data);
          return _this.validate(i, function(err) {
            var target;
            target = blurTarget(field, _this.element);
            if (blurType === 'each') {
              return _blurEach(err, target, field, _this.element);
            } else if (blurType === 'aio') {
              return _blurAio(err, target, field, _this.element);
            }
          });
        });
      };
      for (i in formFields) {
        _fn(i);
      }
    }
    /*
            if params.onSubmit?
                @element.submit (e) =>
                    e.preventDefault()
                    params = @element.serialize()
    */

    return this;
  };
  return window.Eim = Eim;
})(window);
