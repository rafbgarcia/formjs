// Generated by CoffeeScript 1.4.0

/*
Eim v0.1
github.com/rafbgarcia/eimjs.git

Dependencies: jQuery 1.8.2
*/


(function() {

  (function(window) {
    var Eim, Form, Slider;
    Eim = {};
    Eim.Form = function(params) {
      return new Form(params);
    };
    Eim.validators = {
      required: function(errMessage) {
        return {
          isValid: function(val) {
            return !!val.toString().trim();
          },
          errMessage: errMessage || 'Field is required'
        };
      },
      email: function(errMessage) {
        var regex;
        regex = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
        return {
          isValid: function(val) {
            if (val && regex.test(val)) {
              return true;
            }
            return false;
          },
          errMessage: errMessage || 'Email is invalid'
        };
      },
      minLength: function(length, errMessage) {
        return {
          isValid: function(val) {
            return val.toString().trim().length >= length;
          },
          errMessage: errMessage || ("The text is too short, minimum length is " + length)
        };
      },
      maxLength: function(length, errMessage) {
        return {
          isValid: function(val) {
            return val.toString().trim().length <= length;
          },
          errMessage: errMessage || ("The text is too long, maximum length is " + length)
        };
      },
      betweenLength: function(minLength, maxLength, errMessage) {
        return {
          isValid: function(val) {
            var valLength;
            valLength = val.toString().trim().length;
            return valLength >= minLength && valLength <= maxLength;
          },
          errMessage: errMessage || ("The text must have length between " + minLength + " and " + maxLength)
        };
      },
      numeric: function(errMessage) {
        return {
          isValid: function(val) {
            return $.isNumeric(val);
          },
          errMessage: errMessage || 'Field accepts only numeric values'
        };
      },
      min: function(value, errMessage) {
        return {
          isValid: function(val) {
            val = parseInt(val, 10);
            return val >= value;
          },
          errMessage: errMessage || ("Minimum value is " + value)
        };
      },
      max: function(value, errMessage) {
        return {
          isValid: function(val) {
            val = parseInt(val, 10);
            return val <= value;
          },
          errMessage: errMessage || ("Maximum value is " + value)
        };
      },
      between: function(min, max, errMessage) {
        return {
          isValid: function(val) {
            val = parseInt(val, 10);
            return val >= min && val <= max;
          },
          errMessage: errMessage || ("The value must be between " + min + " and " + max)
        };
      },
      match: function(field, errMessage) {
        if (typeof field === 'string') {
          field = $(":input[name='" + field + "']");
        }
        return {
          isValid: function(val) {
            return field.val() === val;
          },
          errMessage: errMessage || ['Field does not match with field', field.attr('name')].join(' ')
        };
      }
    };
    /*
        Slider
    
        Keep in mind that, because of the targets which can be an array of jQuery elements,
        this functions works with the indexes of these elements.
        This way, the number of controls and all targets must be the same, as it actually
        should be!
    
        params example:
        @param params = {
            targets           : $('.photos .photo'), // [$('.pictures'), $('.descriptions')]
            indexControls     : $('.control'),
            prevControl       : $('.slider-prev'),
            nextControl       : $('.slider-next'),
            auto              : false, // Default
            activeClass       : 'active', // Default
            transitionDuration: 600, // Default
            visibleTime       : 6000 // Default
        }
    */

    Eim.Slider = function(params) {
      return new Slider(params);
    };
    Slider = function(p) {
      var activeClass, controls, count, firstTarget, i, interval, lastTarget, nextControl, prevControl, targets, targetsArr, transitionDuration, visibleTime, _addActiveClass, _loadNextTarget, _loadPrevTarget, _loadTarget, _restartSlider, _setInterval, _startSlider, _stopSlider,
        _this = this;
      transitionDuration = p.transitionDuration || 600;
      visibleTime = p.visibleTime || 6000;
      targetsArr = p.targets;
      if (targetsArr instanceof window.jQuery) {
        targetsArr = [targetsArr];
      }
      controls = p.indexControls;
      prevControl = p.prevControl;
      nextControl = p.nextControl;
      activeClass = p.activeClass || 'active';
      count = targetsArr[0].length;
      interval = null;
      firstTarget = 0;
      lastTarget = targetsArr[0].length - 1;
      if (count < 2) {
        return false;
      }
      if (!targetsArr[0]) {
        throw 'Which are the targets?';
      }
      if (!(controls || prevControl || nextControl)) {
        throw 'Which are the triggers?';
      }
      for (i in targetsArr) {
        targets = targetsArr[i];
        if (count !== targets.length) {
          throw ['The number of elements "', targets.selector, '" must be the same as the others targets and indexControls!'].join('');
        }
      }
      if (controls && count !== controls.length) {
        throw 'The number of indexControls must be the same as the targets!';
      }
      this.current = firstTarget;
      for (i in targetsArr) {
        targets = targetsArr[i];
        targets.not(':first').hide(0);
      }
      _addActiveClass = function(index) {
        for (i in targetsArr) {
          targets = targetsArr[i];
          targets.removeClass(activeClass);
          targets.eq(index).addClass(activeClass);
        }
        if (controls) {
          controls.removeClass(activeClass);
          controls.eq(index).addClass(activeClass);
        }
        return this;
      };
      _loadTarget = function(index) {
        if (_this.current === index) {
          return false;
        }
        for (i in targetsArr) {
          targets = targetsArr[i];
          targets.stop(true, true).fadeOut(transitionDuration);
          targets.eq(index).stop(true, true).fadeIn(transitionDuration);
          _addActiveClass(index);
        }
        _this.current = index;
        return _this;
      };
      _loadNextTarget = function() {
        var next, target;
        next = targetsArr[0].siblings(':visible').next(targetsArr[0]);
        target = (next.length && targetsArr[0].index(next)) || firstTarget;
        _loadTarget(target);
        return this;
      };
      _loadPrevTarget = function() {
        var prev, target;
        prev = targetsArr[0].siblings(':visible').prev(targetsArr[0]);
        target = (prev.length && targetsArr[0].index(prev)) || lastTarget;
        _loadTarget(target);
        return this;
      };
      _setInterval = function(callback) {
        interval = window.setInterval(callback, visibleTime);
        return this;
      };
      _stopSlider = function() {
        window.clearInterval(interval);
        return this;
      };
      _startSlider = function() {
        if (!p.inverseDirection) {
          _setInterval(function() {
            return _loadNextTarget();
          });
        } else {
          _setInterval(function() {
            return _loadPrevTarget();
          });
        }
        return this;
      };
      _restartSlider = function() {
        _stopSlider();
        return _startSlider();
      };
      _addActiveClass(firstTarget);
      this.init = function() {
        if (p.auto) {
          _startSlider();
        }
        if (controls != null) {
          controls.bind('click', function(e) {
            e.preventDefault();
            _loadTarget(controls.index($(this)));
            if (p.auto) {
              return _restartSlider();
            }
          });
        }
        if (prevControl || nextControl) {
          prevControl.click(function(e) {
            e.preventDefault();
            _loadPrevTarget();
            return _restartSlider();
          });
          nextControl.click(function(e) {
            e.preventDefault();
            _loadNextTarget();
            return _restartSlider();
          });
        }
        return this;
      };
      this.destroy = function() {
        _stopSlider();
        controls.unbind('click');
        return this;
      };
      this.remake = function() {
        this.init();
        return this;
      };
      return this.init();
    };
    Eim.sendMessage = function(message, title) {};
    Eim.improveInputFile = function(obj) {
      return obj = obj || $('input:file');
    };
    /*
        Placeholder (for IE only)
        @param callback set a callback if you need to validate your form fields,
               it will be triggered if form has fields with value == placeholder
               callback(fieldsNamesWithErrors, submittedForm)
    */

    Eim.placeholder = function(callback) {
      var errors, forms, inputs, submited, valueEqualsPlaceholder;
      if (navigator.appName === 'Microsoft Internet Explorer') {
        submited = {};
        inputs = $(':input[placeholder]');
        forms = $('form');
        errors = [];
        valueEqualsPlaceholder = function(element) {
          return element.val() === element.attr('placeholder');
        };
        inputs.each(function() {
          var _this;
          _this = $(this);
          return _this.val(_this.attr('placeholder'));
        }).focus(function() {
          var _this;
          _this = $(this);
          if (valueEqualsPlaceholder(_this)) {
            return _this.val('');
          }
        }).blur(function() {
          var _this;
          _this = $(this);
          if (!_this.val()) {
            return _this.val(_this.attr('placeholder'));
          }
        });
        if (typeof callback === 'function') {
          return forms.submit(function(e) {
            var i, that, _inputs;
            errors = [];
            that = $(this);
            i = that.index(forms);
            _inputs = that.find(':input[placeholder]');
            if (!submited[i]) {
              e.preventDefault();
              submited[i] = true;
              _inputs.each(function() {
                var _this;
                _this = $(this);
                if (valueEqualsPlaceholder(_this)) {
                  return errors.push(_this);
                }
              });
              if (errors.length) {
                submited[i] = false;
              }
              return callback(errors, that);
            }
          });
        }
      }
    };
    Form = function(params) {
      var blurTarget, blurType, formErrors, formFields, i, _blurAio, _blurEach, _fn, _onBlurTarget, _validateField, _validateForm,
        _this = this;
      formFields = params.fields;
      formErrors = {};
      _this = this;
      _validateField = function(fieldName, callback) {
        var err, field, fieldValue, i, validators;
        _this.clearErrors(fieldName);
        field = formFields[fieldName];
        fieldValue = field.value;
        validators = field.validators;
        err = false;
        if (validators.hasOwnProperty('isValid')) {
          if (!validators.isValid(fieldValue)) {
            err = validators.errMessage;
            _this.addError(fieldName, err);
            callback(err);
          }
        } else if (validators.length) {
          for (i in validators) {
            if (!field.hasError) {
              if (!validators[i].isValid(fieldValue)) {
                err = validators[i].errMessage;
                _this.addError(fieldName, err);
                callback(err);
              }
            }
          }
        }
        if (!err) {
          return callback();
        }
      };
      _validateForm = function(callback) {
        var error, i;
        error = false;
        for (i in formFields) {
          _validateField(i, function(err) {
            if (err) {
              return error = true;
            }
          });
        }
        return callback(error);
      };
      this.element = params.form;
      this.fields = function(name) {
        return (name && formFields[name]) || formFields;
      };
      this.bind = function(data) {
        var i;
        for (i in data) {
          if (formFields.hasOwnProperty(i)) {
            formFields[i].value = data[i];
          }
        }
        return this;
      };
      this.errors = formErrors;
      this.addError = function(fieldName, error) {
        formErrors[fieldName] = error;
        formFields[fieldName].hasError = true;
        return formFields[fieldName].error = error;
      };
      this.hasErrors = function() {
        var i;
        for (i in formFields) {
          if (formFields[i].hasError) {
            return true;
          }
        }
        return false;
      };
      this.clearErrors = function(fieldName) {
        formErrors[fieldName] = void 0;
        formFields[fieldName].hasError = void 0;
        return formFields[fieldName].error = void 0;
      };
      this.validate = function(fieldName, callback) {
        if (typeof fieldName === 'function') {
          callback = fieldName;
          _validateForm(callback);
        } else if (typeof fieldName === 'string') {
          _validateField(fieldName, callback);
        }
        return this;
      };
      blurType = params.blurType;
      _onBlurTarget = function(field, form) {
        if (blurType === 'each') {
          return field.next('.field-error');
        } else {
          return $('#form-errors');
        }
      };
      _blurEach = function(error, target, field, form) {
        return target.html(error || '');
      };
      _blurAio = function(err, target, field, form) {
        var error, message, name;
        name = field.attr('name');
        error = $("#field-error-" + name);
        if (err) {
          message = "" + name + ": " + err;
          if (error.length) {
            if (message !== error.html()) {
              return error.html(message);
            }
          } else {
            message = "<p id='field-error-" + name + "'>" + message + "</p>";
            return target.append(message);
          }
        } else if (error.length) {
          return error.html('');
        }
      };
      if (params.fieldBlur === true) {
        blurTarget = params.onBlurTarget;
        if (typeof blurTarget !== 'function') {
          blurTarget = _onBlurTarget;
        }
        if ((blurType != null) && blurType !== 'each') {
          _this.element.before('<div id="form-errors"></div>');
        }
        _fn = function(i) {
          var field;
          field = _this.element.find(":input[name='" + i + "']");
          if ((blurType != null) && blurType === 'each') {
            field.after('<span class="field-error"></span>');
          }
          return field.blur(function(e) {
            var data;
            data = {};
            data[i] = field.val();
            _this.bind(data);
            return _this.validate(i, function(err) {
              var target;
              target = blurTarget(field, _this.element);
              if (blurType === 'each') {
                return _blurEach(err, target, field, _this.element);
              } else if (blurType === 'aio') {
                return _blurAio(err, target, field, _this.element);
              }
            });
          });
        };
        for (i in formFields) {
          _fn(i);
        }
      }
      /*
              if params.onSubmit?
                  @element.submit (e) =>
                      e.preventDefault()
                      params = @element.serialize()
      */

      return this;
    };
    return window.Eim = Eim;
  })(window);

}).call(this);
